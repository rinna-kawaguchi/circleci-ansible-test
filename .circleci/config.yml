# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# 参考：https://circleci.com/developer/ja/orbs/orb/circleci/aws-cli
orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@5.2.0
  ansible-playbook: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.3.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml

  execute-cloudformation:
    # orbs使う時はexecutorとする
    executor: aws-cli/default
    steps:
      # Checkout the code as the first step.
      - checkout
      # https://circleci.com/developer/ja/orbs/orb/circleci/aws-cli のsetupを使う
      - aws-cli/setup:
          # 下記の環境変数はcircleci実行時に設定する
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: Deploy to aws from template
          command:  |
            set -x
            aws cloudformation deploy --template-file cloudformation/cfn_network.yml \
              --stack-name raisetech-aws-lecture13-ci-network
            aws cloudformation deploy --template-file cloudformation/cfn_iam_role.yml \
              --stack-name raisetech-aws-lecture13-ci-iam-role --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation deploy --template-file cloudformation/cfn_application.yml \
              --stack-name raisetech-aws-lecture13-ci-application --capabilities CAPABILITY_NAMED_IAM

  execute-ansible:
    executor: ansible-playbook/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "SHA256:5xYMYiXExMetTl9FUX/tiLxVy0QjrR0oqb50dx/MA7U"
      - ansible-playbook/install:
          version: 2.10.7
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: Get public IP of target node
          command: |
            TARGET_IP=$(aws cloudformation describe-stacks \
              --stack-name raisetech-aws-lecture13-ci-application \
              --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" \
              --output text)
            echo -e "[target_node]\n${TARGET_IP} ansible_user=ec2-user \
              ansible_ssh_private_key_file=~/.ssh/circleci-key-pair.pem" > ansible/inventory
            echo "${TARGET_IP}" > target_ip.txt
      - run:
          name: Get RDS password from AWS Secrets Manager
          command: |
            DB_PASSWORD=$(aws secretsmanager get-secret-value \
              --secret-id aws-lecture13-ci-rds-secret \
              --query 'SecretString' \
              --output text | jq '.password')
            echo "export DB_PASSWORD=${DB_PASSWORD}" >> $BASH_ENV
      - run:
          name: Get ALB DNS
          command: |
            ALB_DNS=$(aws cloudformation describe-stacks \
              --stack-name raisetech-aws-lecture13-ci-application \
              --query "Stacks[0].Outputs[?OutputKey=='ALBDNS'].OutputValue" \
              --output text)
            echo "export ALB_DNS=${ALB_DNS}" >> $BASH_ENV
      - persist_to_workspace:
          root: .
          paths:
            - target_ip.txt
      - ansible-playbook/playbook:
          playbook: ansible/playbook.yml
          playbook-options: -i ansible/inventory
  execute_serverspec:
    executor: ruby/default
    steps:
      - checkout
      - ruby/install:
          version: 3.2.3
      - add_ssh_keys:
          fingerprints:
            - "SHA256:5xYMYiXExMetTl9FUX/tiLxVy0QjrR0oqb50dx/MA7U"
      - attach_workspace:
          at: .
      - run:
          name: Setup SSH config
          command: |
            echo -e "Host target\n    \
            HostName $(cat /home/circleci/project/target_ip.txt)\n    \
            IdentityFile ~/.ssh/circleci-key-pair.pem\n    \
            User ec2-user" >> ~/.ssh/config
            cat ~/.ssh/config
      - run:
          name: Install dependencies
          command: |
            cd serverspec
            bundle install
      - run:
          name: Execute Serverspec test
          command: |
            cd serverspec
            bundle exec rake spec

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  iaas-pipeline-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - cfn-lint
      - execute-cloudformation
      - execute-ansible:
          requires:
            - execute-cloudformation
      - execute_serverspec:
          requires:
            - execute-ansible
